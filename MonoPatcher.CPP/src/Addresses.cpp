#include "Addresses.h"
#include "scan.h"
#include <Windows.h>
#include <Psapi.h>
#include <stdio.h>
#define ADDRESS(name, lookup) \
printf("Scanning for %s...\n", #name);\
name = ScanInternal(lookup, lookup##Mask, modBase, size);\
if (name == nullptr) {\
	printf("Failed to find address for %s!\n", #name);\
	return false;\
}\
else\
{\
	printf("Found %s at %p\n", #name, name);\
}\

namespace Addresses {
	// Location: 0x0040fe72 (1.69)
	// Offset 2, length 4 is the singleton addr.
	static char ScriptHostSingletonLookup[] = { 0x8B, 0x0D, 0x94, 0x94, 0x20, 0x01, 0x52, 0x50, 0xE8, 0xB1, 0xD7, 0xFF, 0xFF, 0xC2, 0x0C, 0x00, 0x8B, 0x4C, 0x24, 0x08, 0x51, 0x8B, 0x0D, 0x94, 0x94, 0x20, 0x01, 0x50, 0xE8, 0x2D, 0xDA, 0xFF, 0xFF, 0xC2, 0x0C, 0x00 };
	static char ScriptHostSingletonLookupMask[] = "xx????xxx????xxxxxxxxxx????xx????xxx";

	// Location: 0x00411200 (1.69)
	static char CreateMonoClassLookup[] = { 0x83, 0xEC, 0x18, 0x53, 0x8B, 0x5C, 0x24, 0x20, 0x55, 0x57, 0x8B, 0x7C, 0x24, 0x2C, 0x57, 0x53, 0x8B, 0xE9, 0xE8, 0x39, 0xC0, 0xFF, 0xFF, 0x85, 0xC0, 0x89, 0x44, 0x24, 0x28 };
	static char CreateMonoClassLookupMask[] = "xxxxxxxxxxxxxxxxxxx????xxxxxx";

	// Location: 0x00411be0 (1.69)
	static char InitializeScriptHostLookup[] = { 0x51, 0x53, 0x56, 0x57, 0x8B, 0xF1, 0xE8, 0xB5, 0xD6, 0x4C, 0x00, 0x33, 0xDB, 0x3B, 0xC3, 0x74, 0x13, 0x8B, 0x10, 0x68, 0x10, 0x27, 0x00, 0x00 };
	static char InitializeScriptHostLookupMask[] = "xxxxxxx????xxxx??xxxxxxx";

	// Location: 0x00515f40 (1.69)
	static char MonoAddInternalCallLookup[] = { 0xE8, 0xEB, 0x2A, 0x00, 0x00, 0x8B, 0x44, 0x24, 0x08, 0x8B, 0x4C, 0x24, 0x04, 0x6A, 0x00, 0x50, 0x51, 0xE8, 0x5A, 0x5B, 0xFC, 0xFF, 0x8B, 0x15, 0x1C, 0xF3, 0x20, 0x01, 0x83, 0xC4, 0x04 };
	static char MonoAddInternalCallLookupMask[] = "x????xxxxxxxxxxxxx????x?????xxx";

	// Location: 0x004f04b0 (1.69)
	static char MonoGenerateCodeLookup[] = { 0x55, 0x8D, 0x6C, 0x24, 0x98, 0x81, 0xEC, 0x08, 0x07, 0x00, 0x00, 0x53, 0x8B, 0x5D, 0x70, 0x56, 0x57, 0x53, 0xE8, 0xC9, 0x88, 0x02, 0x00, 0x8B, 0xF8, 0x53 };
	static char MonoGenerateCodeLookupMask[] = "xxxxxxxxxxxxxxxxxxx????xxx";

	// Location: 0x004E9D9A (1.69)
	static char FirstJITCheckLookup[] = { 0x75, 0x26, 0x50, 0x88, 0x48, 0x15, 0x8B, 0x43, 0x04, 0x50, 0xE8, 0x24, 0xE0, 0x00, 0x00, 0x8B, 0x4D, 0x0C, 0x89, 0x43, 0x20, 0x83, 0xC4, 0x08, 0xC6, 0x41, 0x15, 0x01, 0x83, 0x7B, 0x20, 0x00 };
	static char FirstJITCheckLookupMask[] = "x?xxxxxxxxx????xxxxxxxxxxxxxxxxx";

	// Location: 0x004F82FC (1.69)
	static char SecondJITCheckLookup[] = { 0x74, 0x4C, 0x68, 0x24, 0xF1, 0x20, 0x01, 0xFF, 0x15, 0x70, 0xF3, 0xFD, 0x00, 0x8B, 0x4D, 0xF4, 0x51, 0xE8, 0x4E, 0x9F, 0xF0, 0xFF, 0x6A, 0x00, 0x6A, 0x00, 0x57, 0xE8, 0xF4, 0x02, 0x04, 0x00 };
	static char SecondJITCheckLookupMask[] = "x?x????xx????xxxxx????xxxxxx????";

	// Location: 0x004ECC38 (1.69)
	static char RetMoreValuesOnStackLookup[] = { 0x0F, 0x86, 0xA9, 0xB1, 0xFF, 0xFF, 0x2B, 0xF0, 0xC1, 0xFE, 0x03, 0x56, 0x68, 0x58, 0x5C, 0xFE, 0x00, 0xE8, 0x32, 0xD9, 0xFE, 0xFF, 0x83, 0xC4, 0x08, 0xE9, 0x91, 0xB1, 0xFF, 0xFF, 0x8B, 0x45, 0xF8, 0x8B, 0x40, 0x18 };
	static char RetMoreValuesOnStackLookupMask[] = "xx????xxxxxxx????x????xxxx????xxxxxx";

	void* ScriptHostGetInstance;
	void* ScriptHostCreateMonoClass;
	void* InitializeScriptHost;
	void* MonoAddInternalCall;
	void* GenerateCode;
	void* JIT1;
	void* JIT2;
	void* RetMoreValuesOnStack;

	static bool ScanAddresses(char* modBase, int size) {
		char* shinstanceAddr = ScanInternal(ScriptHostSingletonLookup, ScriptHostSingletonLookupMask, modBase, size) + 2;
		int shinstancePointer = 0;
		memcpy_s(&shinstancePointer, 4, shinstanceAddr, 4);
		ScriptHostGetInstance = (char*)shinstancePointer;
		ADDRESS(ScriptHostCreateMonoClass, CreateMonoClassLookup);
		ADDRESS(InitializeScriptHost, InitializeScriptHostLookup);
		ADDRESS(MonoAddInternalCall, MonoAddInternalCallLookup);
		ADDRESS(GenerateCode, MonoGenerateCodeLookup);
		ADDRESS(JIT1, FirstJITCheckLookup);
		ADDRESS(JIT2, SecondJITCheckLookup);
		ADDRESS(RetMoreValuesOnStack, RetMoreValuesOnStackLookup);
	}

	bool Initialize() {
		HMODULE module = GetModuleHandleA(NULL);
		char* modBase = (char*)module;
		HANDLE proc = GetCurrentProcess();
		MODULEINFO modInfo;
		GetModuleInformation(proc, module, &modInfo, sizeof(MODULEINFO));
		int size = modInfo.SizeOfImage;
		if (!ScanAddresses(modBase, size)) return false;
		return true;
	}
}